Para regresar a una versión de algún archivo podemos hacer un git log y mediante el id que nos devuelva ejecutamos el siguiente comando: git reset
Hay dos formas de usar git reset: con el argumento --hard, borrando toda la información que tengamos en el área de staging (y perdiendo todo para siempre). O, un poco más seguro, con el argumento --soft, que mantiene allí los archivos del área de staging para que podamos aplicar nuestros últimos cambios pero desde un commit anterior.

Si quiero regresar en el tiempo en un archivo se hace:
git checkout ID_COMMIT nombreArchivo

push a un repositorio remoto 
git remote add origin https://github.com/afernandez4/gitFlow.git
git push -u origin master


Para ver el historial de un repo podemos usar el siguiente comando:
git log --graph --decorate --oneline

Este comando es muy largo y dificil de recordar, por lo tanto lo vamos a declarar como un alias llamado arbolito de la siguiente manera:
alias arbolito="git log --graph --decorate --oneline"
Ahora, arbolito contiene todo el comando para ver el historial.

Para crear tags se debe hacer lo siguiente:
1. Elegir en que commit o versión del código vamos a crear un tag, para esto hacemos un git log y seleccionamos el id de la versión a taggear.
2. Ejecutamos el siguiente comando: git tag -a v0.1 -m "tag de una version cualquiera" idCommiATaggear
3. git pull
4. git push origin --tags (para enviar el tag a GitHub). Este tag se va a Releases del repositorio y también a tags dentro de las ramas del proyecto seleccionamos la pestaña tag y ahi va a estar creado el tag que enviamos al hacer un push.

Para borrar un tag debo hacer lo siguiente:
1. git tag -d tagABorrar
2. git pull
3. git push origin --tags
Esto borra solo del local no de los tags de GitHub, para borrar de todo lado hacer lo siguiente:
1. git push origin .refs/tags/dormido

Para ver una versión visual de las ramas y commits de un proyecto ejecutar el comando gitk

git rebase.- El comando rebase es una mala práctica, nunca se debe usar (es una mala práctica).
Con rebase puedes recoger todos los cambios confirmados en una rama y ponerlos sobre otra.

git stash: Guardar cambios en memoria y recuperarlos después. Además puedo crear una rama a partir del stahs ejecutando el siguiente comando:
	git stash branch nombreDelBranch

git clean: Limpiar tu proyecto de archivos no deseados
	git clean --dry-clean: lista los archivos que git cree que no deben estar
	git clean -f borra los archivos listados en el comando anterior excepto los que están en .gitignore

git cherry-pick: Traer commits viejos al head de un branch (es una mala práctica), se debe especificar el id del commit que quiero traer:
	1. git checkout ramaQueTieneGitViejo
	2. arbolito para recuperar idCommitViejo
	3. git checkout al branch en el que quiero poner el commit viejo.
	4. git cherry-pick idCommitViejo


Reconstruír commits en Git con amend:
Se utiliza cuando en un commit me olvidé de enviar un cambio extra. Por ejemplo, el commit debía contener el estilo para un header y un footer y solo hice commit del estilo del header, en este caso podemos agregar el estilo del footer y a continuación los siguientes pasos:
	1. git add del cambio
	2. git commit --amend (nos abre un vi para ver si se quiere cambiar el comentario del commit anterior)

git reset --soft HashDelHEAD te mantiene lo que tengas en staging ahí.
git reset --hard HashDelHEAD resetea absolutamente todo incluyendo lo que tengas en staging.
git reset es una mala práctica, no deberías usarlo en ningún momento; debe ser nuestro último recurso.

git grep.- para buscar cosas en archivos y commits
	git grep "texto a buscar"
	git grep -n "texto a buscar" //dice la línea en donde se usa
	git grep -c "texto a buscar" //dice las veces que se repite el texto a buscar
	git log -S "texto a buscar" //busca en todo el log
	
git shortlog -sn saca los commits por usuario
Para agregar alias a nivel de la instalación de git local se debe hacer lo siguiente:
git config --global alias.nombreAlias "comando a ser agregado a un alias" por ejemplo:
	git config --global alias.arbol-custom "log --graph --decorate --oneline"